{"ast":null,"code":"var _jsxFileName = \"/Users/katallen/Documents/GitHub/AccessibleMakerspace/VirtualMakerSpace-main/src/Pages/projectUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport FilterableDropdown from \"../Components/FilterableDropdown\";\nimport axios from \"axios\";\nimport fetch from \"node-fetch\";\n\n// Server call to get the general list for Tags & Skills\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function getTagSkills() {\n  try {\n    const response = await axios.post('/api/getTags');\n    return response.data;\n  } catch (err) {\n    console.log(\"getTagSkills ERROR: \" + err);\n  }\n}\n;\n\n// SuppliesContent is a component (with its own return) that store the added supplies and creates the table\nconst SuppliesContent = ({\n  quantity,\n  setQuantity,\n  itemName,\n  setItemName,\n  items,\n  setItems\n}) => {\n  const handleAddButtonClick = event => {\n    if (quantity > 0 && itemName.trim() !== '') {\n      // Create a new item object\n      const newItem = {\n        quantity: quantity,\n        itemName: itemName\n      };\n\n      // Update the items state with the new item\n      setItems(prevItems => [...prevItems, newItem]);\n\n      // Clear input fields after adding\n      setQuantity(0);\n      setItemName('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"center-headings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Supplies:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \" Please enter each item as a separate entry. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"supplies-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0\",\n          step: \"1\",\n          value: quantity,\n          onChange: e => setQuantity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"input\",\n          name: \"input\",\n          rows: \"1\",\n          value: itemName,\n          onChange: e => setItemName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"add-button\",\n          onClick: handleAddButtonClick,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), items.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"table-style\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Item Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: items.slice(0, 5).map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.itemName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n// SkillsContent is a function that calls the FilterableDropdown component\n// allowing the users to select from a premade list of skills/tags and/or add their own\n_c = SuppliesContent;\nfunction SkillsContent({\n  list,\n  skills,\n  setSkills\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"center-headings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Skills:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \" Please limit to 5 skills. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FilterableDropdown, {\n        options: list,\n        skills: skills,\n        setSkills: setSkills,\n        id: \"skills\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c2 = SkillsContent;\n;\n\n// RelevantTagsContent is a function that calls the FilterableDropdown component\n//  allowing the users to select from a premade list of skills/tags and/or add their own\nfunction RelevantTagsContent({\n  list,\n  typedTag,\n  setTypedTag\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"center-headings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select Relevant Tags:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \" Please limit to 5 tags. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterableDropdown, {\n      options: list,\n      typedTag: typedTag,\n      setTypedTag: setTypedTag,\n      hideLevel: true,\n      id: \"tags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c3 = RelevantTagsContent;\n;\n\n//Main Function that displays all components of the Upload project form \nexport default function Home() {\n  _s();\n  const [generalList, setGeneralList] = useState([]);\n  const [numImages, setNumImages] = useState(0);\n  const [projImages, setProjImages] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [id, setProjID] = useState(\"\");\n  const [projDesc, setProjDesc] = useState(\"\");\n  const [skills, setSkills] = useState([]);\n  const [typedTag, setTypedTag] = useState([]);\n  const [quantity, setQuantity] = useState(0);\n  const [itemName, setItemName] = useState(\"\");\n  const [projVideo, setProjVideo] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [possibleErrors, setPossibleErrors] = useState({\n    incompleteForm: false\n  });\n  const [editMode, setEditMode] = useState(false);\n  const [formData, setFormData] = useState({\n    projid: '',\n    videourl: '',\n    aslurl: '',\n    //add that edit feature only for admins!\n    title: '',\n    description: '',\n    skills: [],\n    supplies: [],\n    tags: []\n  });\n\n  //on page load, get the skills/tags list, check if in editing mode, \n  useEffect(() => {\n    getTagSkills().then(data => {\n      setGeneralList(data);\n    }).catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n    const editing = sessionStorage.getItem('Editing') === 'true';\n    //if in editing mpde the fill the form with the clicked project's stored information\n    if (editing) {\n      setEditMode(editing);\n      preFillForm();\n    }\n    //clear values if user leaves page\n    return () => {\n      clearValues();\n    };\n  }, []);\n\n  //get the project's data from the server to prefill form in editing mode\n  const preFillForm = async () => {\n    const projid = sessionStorage.getItem('EditingID');\n    setProjID(sessionStorage.getItem('EditingID'));\n    try {\n      const response = await axios.post('/api/project', {\n        id: projid\n      });\n      setFormData(response.data);\n    } catch (err) {\n      console.log(\"Error editing project: \" + err);\n    }\n  };\n\n  //store the user credentials in order to later verify editing capabilities\n  useEffect(() => {\n    setUsername(sessionStorage.getItem('account'));\n    setPassword(sessionStorage.getItem('key'));\n  }, [username, password]);\n\n  //once the project's data is recieved from server, fill in the appropriate variables \n  useEffect(() => {\n    setTitle(formData.title || \"\");\n    setProjVideo(formData.videourl || null);\n    setProjDesc(formData.description || \"\");\n    setSkills(formData.skills || []);\n    console.log(\"skills projectUpload\");\n    console.log(\"formData.skills\", formData.skills);\n    setItems(formData.supplies || []);\n    setTypedTag(formData.tags || []);\n  }, [formData]);\n\n  //function processes the uploaded images, and properly formats them for sending\n  const handleFileUpload = event => {\n    const files = event.target.files; // Get the selected files\n    const fileList = Array.from(files); // Converting files to an array\n\n    for (let i = 0; i < fileList.length; i++) {\n      console.log(\"Type of File: \" + typeof fileList[i]);\n      console.log(fileList[i] instanceof Blob);\n      console.log(fileList[i] instanceof ArrayBuffer);\n    }\n    const readFileAsBase64 = file => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          resolve(reader.result);\n        };\n        reader.onerror = reject;\n        console.log(\"File Type: \" + typeof file);\n        reader.readAsDataURL(file);\n        // return reader.result;\n      });\n    };\n    Promise.all(fileList.map(image => readFileAsBase64(image))).then(base64Strings => {\n      const updatedImages = fileList.map((file, index) => ({\n        file: file,\n        description: '',\n        // Initialize description to empty string\n        previewUrl: URL.createObjectURL(file),\n        // Create a preview URL for each image\n        base64: base64Strings[index] // Assign the corresponding Base64 string\n      }));\n      const formData = new FormData();\n      updatedImages.forEach((image, index) => {\n        formData.append(`file${index}`, image.base64); // Append each file to FormData\n      });\n\n      // console.log(\"Form Data: \", formData)\n      console.log(\"formData: \");\n      for (let pair of formData.entries()) {\n        console.log(pair[0], pair[1]);\n      }\n      setProjImages(prevImages => [...prevImages, ...formData]);\n    }).catch(error => {\n      console.log(\"Error with getting Images: \" + error);\n    });\n\n    // file: image,\n    // description: '', // Initialize description to empty string\n    // previewUrl: URL.createObjectURL(image), // Create a preview URL for each image\n    // base64: readFileAsBase64(image)\n\n    // Adding the new files to the existing projImages array\n    // setProjImages(prevImages => [...prevImages, ...updatedImages]);\n  };\n\n  //on submit, uploaded images to the backend & send the user's project data to the backend\n  const handleSubmit = async () => {\n    checkCompleteness();\n    console.log(\"incompleteForm: \", possibleErrors.incompleteForm);\n    try {\n      console.log(\"Project Images\");\n      console.log(projImages);\n      if (Array.isArray(projImages)) {\n        console.log(\"We are of type array\");\n      } else {\n        console.log(\"We are not of type array\");\n      }\n      let Images = new FormData();\n      for (let i = 0; i < projImages.length; i++) {\n        console.log(projImages[i][0], projImages[i][1]);\n        Images.append('images', projImages[i][1]);\n      }\n      if (Images instanceof FormData) {\n        console.log(\"We are of type form data\");\n      } else {\n        console.log(\"We are not of type form data\");\n      }\n      console.log(\"Images: \");\n      for (let pair of Images.entries()) {\n        console.log(pair[0], pair[1]);\n      }\n      const response = await axios.post('/api/createProject', {\n        userName: username,\n        password: password,\n        title: title,\n        description: projDesc,\n        videoURL: projVideo,\n        projImages: [],\n        supplies: items,\n        skill: skills,\n        tags: typedTag\n      });\n      console.log(\"Responce Data: \" + response.data);\n      let project = response.data;\n      console.log(parseInt(project));\n      Images.append('username', username);\n      Images.append('password', password);\n      Images.append('projid', project);\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const fetchResponce = await axios.post('/api/uploadImage', Images, config);\n      console.log(\"Fetch responce: \" + fetchResponce.data);\n      console.log(\"Project Sent\");\n\n      // console.log(\"Fetch Responce\" + response.data)\n\n      setTimeout(function () {\n        window.location.href = \"/projects\";\n      }, 500);\n      // return response.data;\n    } catch (err) {\n      console.log(\"Error submitting project: \" + err);\n    }\n  };\n\n  //error checking function that ensure all required parts of the form is there\n  function checkCompleteness() {\n    console.log(\"submiting form\");\n    console.log(\"title: \", title);\n    console.log(\"projDesc: \", projDesc);\n    console.log(\"numImages: \", numImages);\n    console.log(\"skills: \", skills);\n    console.log(\"typedTag: \", typedTag);\n    console.log(\"supplies: \", items);\n    console.log(\"images: \", projImages);\n    console.log(username, password);\n    console.log(\"done\");\n\n    // Error handling for incomplete form submittions \n    if (title === '' || projDesc === '' || projImages.length === 0 || skills.length === 0 || typedTag.length === 0 || items.length === 0) {\n      setPossibleErrors(prevState => ({\n        ...prevState,\n        incompleteForm: true\n      }));\n      return;\n    }\n  }\n  ;\n\n  //when an error occures, if user is changing the value to resolve issue then error message hides\n  const handleChange = event => {\n    event.preventDefault();\n    if (possibleErrors.incompleteForm) {\n      setPossibleErrors(prevState => ({\n        ...prevState,\n        incompleteForm: false\n      }));\n      console.log(\"incompleteForm: \", possibleErrors.incompleteForm);\n    }\n  };\n\n  //Function that updates the projects' information in editing mode\n  async function handleUpdate() {\n    console.log(\"updating\");\n    checkCompleteness();\n    try {\n      console.log(\"about to call server\");\n      let response = await axios.post(\"/api/editProject\", {\n        username: username,\n        password: password,\n        projid: Number(id),\n        title: title,\n        description: projDesc,\n        videoURL: projVideo,\n        projImages: projImages,\n        supplies: items,\n        skill: skills,\n        tags: typedTag\n      });\n      console.log(response.data);\n      if (response.data) {\n        window.location.href = \"/project\";\n      } else {\n        alert(\"could not edit project\");\n      }\n    } catch (err) {\n      console.log(\"Error updating project: \" + err);\n    }\n  }\n\n  //call on page leave or update submission to clean up prefill values \n  function clearValues() {\n    sessionStorage.removeItem('Editing');\n    sessionStorage.removeItem('EditingID');\n    setFormData({\n      projid: '',\n      videourl: '',\n      aslurl: '',\n      title: '',\n      description: '',\n      skills: [],\n      supplies: [],\n      tags: []\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [possibleErrors.incompleteForm ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"incompleteForm\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Please make sure you fill out all the fields in the form before uploading your project. Adding a video is optional. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid-project-title-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"project-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Project Title: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"project-title-input\",\n            value: title,\n            onChange: e => setTitle(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid-item description-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"description\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Description: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"description\",\n            value: projDesc,\n            onChange: e => setProjDesc(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"alignment\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"grid-item image-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"image-upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Upload Image:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"image\",\n              className: \"uploadImage\",\n              accept: \".jpg, .png, .jpeg\",\n              multiple: true,\n              required: true,\n              onChange: handleFileUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), projImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: projImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n                style: {\n                  width: \"80px\",\n                  paddingRight: \"5px\",\n                  paddingBottom: \"8px\"\n                },\n                src: image.previewUrl,\n                alt: `Image ${index}`\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 23\n              }, this))\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"grid-item video-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"video-upload\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Upload Video:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"url\",\n              id: \"url\",\n              name: \"url\",\n              value: projVideo,\n              onChange: e => setProjVideo(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Video Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"video-description\",\n              name: \"video-description\",\n              rows: \"3\",\n              placeholder: \"Enter video description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SuppliesContent, {\n        quantity: quantity,\n        setQuantity: setQuantity,\n        itemName: itemName,\n        setItemName: setItemName,\n        items: items,\n        setItems: setItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SkillsContent, {\n        list: generalList,\n        skills: skills,\n        setSkills: setSkills\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RelevantTagsContent, {\n        list: generalList,\n        typedTag: typedTag,\n        setTypedTag: setTypedTag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid-item submit\",\n        children: editMode ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"submit-button\",\n            onClick: handleUpdate,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"submit-button\",\n            onClick: handleSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Home, \"unAE7V+BEnHbjbmdcYy7T8aJLYY=\");\n_c4 = Home;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SuppliesContent\");\n$RefreshReg$(_c2, \"SkillsContent\");\n$RefreshReg$(_c3, \"RelevantTagsContent\");\n$RefreshReg$(_c4, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FilterableDropdown","axios","fetch","jsxDEV","_jsxDEV","Fragment","_Fragment","getTagSkills","response","post","data","err","console","log","SuppliesContent","quantity","setQuantity","itemName","setItemName","items","setItems","handleAddButtonClick","event","trim","newItem","prevItems","children","class","fileName","_jsxFileName","lineNumber","columnNumber","type","min","step","value","onChange","e","target","id","name","rows","onClick","length","slice","map","item","index","_c","SkillsContent","list","skills","setSkills","options","_c2","RelevantTagsContent","typedTag","setTypedTag","hideLevel","_c3","Home","_s","generalList","setGeneralList","numImages","setNumImages","projImages","setProjImages","title","setTitle","setProjID","projDesc","setProjDesc","projVideo","setProjVideo","username","setUsername","password","setPassword","possibleErrors","setPossibleErrors","incompleteForm","editMode","setEditMode","formData","setFormData","projid","videourl","aslurl","description","supplies","tags","then","catch","error","editing","sessionStorage","getItem","preFillForm","clearValues","handleFileUpload","files","fileList","Array","from","i","Blob","ArrayBuffer","readFileAsBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","all","image","base64Strings","updatedImages","previewUrl","URL","createObjectURL","base64","FormData","forEach","append","pair","entries","prevImages","handleSubmit","checkCompleteness","isArray","Images","userName","videoURL","skill","project","parseInt","config","headers","fetchResponce","setTimeout","window","location","href","prevState","handleChange","preventDefault","handleUpdate","Number","alert","removeItem","className","accept","multiple","required","style","width","paddingRight","paddingBottom","src","alt","placeholder","_c4","$RefreshReg$"],"sources":["/Users/katallen/Documents/GitHub/AccessibleMakerspace/VirtualMakerSpace-main/src/Pages/projectUpload.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport FilterableDropdown from \"../Components/FilterableDropdown\";\nimport axios from \"axios\";\nimport fetch from \"node-fetch\"\n\n// Server call to get the general list for Tags & Skills\nasync function getTagSkills(){\n  try{\n    const response = await axios.post('/api/getTags');\n    return response.data;\n  }\n  catch (err){\n    console.log(\"getTagSkills ERROR: \" + err);\n  }\n};\n\n// SuppliesContent is a component (with its own return) that store the added supplies and creates the table\nconst SuppliesContent = ({quantity, setQuantity, itemName, setItemName, items, setItems }) => {\n  const handleAddButtonClick = (event) => { \n    if (quantity > 0 && itemName.trim() !== '') {\n      // Create a new item object\n      const newItem = {\n        quantity: quantity,\n        itemName: itemName\n      };\n  \n      // Update the items state with the new item\n      setItems(prevItems => [...prevItems, newItem]);\n  \n      // Clear input fields after adding\n      setQuantity(0);\n      setItemName('');\n    }\n  }; \n\n  return (\n    <>\n    {/* TODO: ask Manpreet ot add back increment */}\n    {/*This is the entire design for the div box and supplies.*/}\n    <div class=\"center-headings\">\n      <h2>Supplies:</h2>\n      <h5> Please enter each item as a separate entry. </h5>\n    </div>\n    <div class=\"supplies-container\">\n      <div class=\"input-container\">\n        <input\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          value={quantity}\n          onChange={(e) => setQuantity(e.target.value)}\n        />\n         {/*Input box and button functiionality*/}\n        <textarea\n          id=\"input\"\n          name=\"input\"\n          rows=\"1\"\n          value={itemName}\n          onChange={(e) => setItemName(e.target.value)}\n        />\n        <button class=\"add-button\" onClick={handleAddButtonClick}>Add</button>\n      </div>\n    </div>\n        \n    {/* Display the items in a table */}\n    {items.length > 0 && (\n    <div class=\"table-style\">\n      <table>\n        <thead>\n          <tr>\n            <th>Quantity</th>\n            <th>Item Name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* limits items to five rows item.map*/}\n          {items.slice(0, 5).map((item, index) => (\n            <tr key={index}>\n              <td>{item.quantity}</td>\n              <td>{item.itemName}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n    )}\n    </>\n  );\n}; \n\n// SkillsContent is a function that calls the FilterableDropdown component\n// allowing the users to select from a premade list of skills/tags and/or add their own\nfunction SkillsContent({list, skills, setSkills}) {\n  return (\n    <>\n      <div class = \"center-headings\">\n        <h2>Skills:</h2>\n        <h5> Please limit to 5 skills. </h5>\n      </div>\n      <div>\n        <FilterableDropdown options={list} skills={skills} setSkills={setSkills} id=\"skills\"/>\n      </div>\n    </>\n  );\n};\n\n// RelevantTagsContent is a function that calls the FilterableDropdown component\n//  allowing the users to select from a premade list of skills/tags and/or add their own\nfunction RelevantTagsContent({list, typedTag, setTypedTag}){\n  return (\n    <>\n      <div class = \"center-headings\">\n        <h2>Select Relevant Tags:</h2>\n        <h5> Please limit to 5 tags. </h5>\n      </div>\n      <FilterableDropdown options={list} typedTag={typedTag} setTypedTag={setTypedTag} hideLevel={true} id=\"tags\"/>\n    </>\n  );\n};\n\n\n//Main Function that displays all components of the Upload project form \nexport default function Home(){ \n  const [generalList, setGeneralList] = useState([]);\n  const [numImages, setNumImages] = useState(0);\n  const [projImages, setProjImages] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [id, setProjID] = useState(\"\");\n  const [projDesc, setProjDesc] = useState(\"\");\n  const [skills, setSkills] = useState([]); \n  const [typedTag, setTypedTag] = useState([]);\n  const [quantity, setQuantity] = useState(0);   \n  const [itemName, setItemName] = useState(\"\");\n  const [projVideo, setProjVideo] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [possibleErrors, setPossibleErrors] = useState({\n    incompleteForm: false,\n  });\n  const [editMode, setEditMode] = useState(false);\n  const [formData, setFormData] = useState({\n    projid: '', \n    videourl: '', \n    aslurl: '', //add that edit feature only for admins!\n    title: '',\n    description: '',\n    skills: [],\n    supplies: [],\n    tags: [],\n  });\n\n  //on page load, get the skills/tags list, check if in editing mode, \n  useEffect(() => {\n    getTagSkills()\n      .then(data => {\n        setGeneralList(data);\n      })\n      .catch(error => {\n        console.error(\"Error fetching data:\", error);\n      });\n    const editing = sessionStorage.getItem('Editing') === 'true';\n    //if in editing mpde the fill the form with the clicked project's stored information\n    if(editing){ \n      setEditMode(editing);\n      preFillForm();\n    }\n    //clear values if user leaves page\n    return () => {\n      clearValues();\n    }\n  }, []);\n\n  //get the project's data from the server to prefill form in editing mode\n  const preFillForm = async () => {\n    const projid = sessionStorage.getItem('EditingID');\n    setProjID(sessionStorage.getItem('EditingID'));\n    try {\n      const response = await axios.post('/api/project', {id: projid});\n      setFormData(response.data);\n    } catch (err) {\n      console.log(\"Error editing project: \" + err);\n    } \n  }\n  \n  //store the user credentials in order to later verify editing capabilities\n  useEffect(() => { \n    setUsername(sessionStorage.getItem('account'));\n    setPassword(sessionStorage.getItem('key'));\n  },[username,password]);\n\n\n  //once the project's data is recieved from server, fill in the appropriate variables \n  useEffect(() => {\n    setTitle(formData.title || \"\");\n    setProjVideo(formData.videourl || null);\n    setProjDesc(formData.description || \"\");\n    setSkills(formData.skills || []);\n    console.log(\"skills projectUpload\");\n    console.log(\"formData.skills\", formData.skills);\n    setItems(formData.supplies || []);\n    setTypedTag(formData.tags || []);\n  },[formData]);\n  \n  //function processes the uploaded images, and properly formats them for sending\n  const handleFileUpload = (event) => {\n    const files = event.target.files; // Get the selected files\n    const fileList = Array.from(files); // Converting files to an array\n\n    for (let i = 0; i < fileList.length; i++){\n      console.log(\"Type of File: \" + typeof fileList[i])\n      console.log(fileList[i] instanceof Blob)\n      console.log(fileList[i] instanceof ArrayBuffer)\n    }\n\n    const readFileAsBase64 = (file) => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          resolve(reader.result)\n        }\n        reader.onerror = reject;\n        console.log(\"File Type: \" + typeof file)\n        reader.readAsDataURL(file)\n        // return reader.result;\n      })\n    }\n    \n    Promise.all(fileList.map(image => readFileAsBase64(image))).then(base64Strings => {\n      const updatedImages = fileList.map((file, index) => ({\n        file: file,\n        description: '', // Initialize description to empty string\n        previewUrl: URL.createObjectURL(file), // Create a preview URL for each image\n        base64: base64Strings[index] // Assign the corresponding Base64 string\n      }));\n      const formData = new FormData();\n      updatedImages.forEach((image, index) => {\n          formData.append(`file${index}`, image.base64); // Append each file to FormData\n      });\n  \n      // console.log(\"Form Data: \", formData)\n      console.log(\"formData: \")\n      for (let pair of formData.entries()){\n        console.log(pair[0],pair[1])\n      }\n      setProjImages(prevImages => [...prevImages, ...formData]);\n\n    }).catch(error => {\n      console.log(\"Error with getting Images: \" + error)\n    })\n    \n    // file: image,\n    // description: '', // Initialize description to empty string\n    // previewUrl: URL.createObjectURL(image), // Create a preview URL for each image\n    // base64: readFileAsBase64(image)\n    \n    \n    // Adding the new files to the existing projImages array\n    // setProjImages(prevImages => [...prevImages, ...updatedImages]);\n\n  };\n\n  //on submit, uploaded images to the backend & send the user's project data to the backend\n  const handleSubmit = async () => {\n    checkCompleteness();\n    \n    console.log(\"incompleteForm: \", possibleErrors.incompleteForm);\n\n    try{\n      console.log(\"Project Images\")\n      console.log(projImages)\n      if (Array.isArray(projImages)){\n        console.log(\"We are of type array\")\n      }\n      else {\n        console.log(\"We are not of type array\")\n      }\n\n      let Images = new FormData();\n      for (let i = 0; i < projImages.length; i++){\n        console.log(projImages[i][0], projImages[i][1])\n        Images.append('images', projImages[i][1])\n      }\n\n      if (Images instanceof FormData){\n        console.log(\"We are of type form data\")\n      }\n      else {\n        console.log(\"We are not of type form data\")\n      }\n\n      console.log(\"Images: \")\n      for (let pair of Images.entries()){\n        console.log(pair[0], pair[1])\n      }\n  \n      const response = await axios.post('/api/createProject', {\n        userName: username, \n        password: password, title:title, description:projDesc, \n        videoURL:projVideo, projImages:[],\n        supplies:items, skill:skills, tags:typedTag \n      });\n\n      console.log(\"Responce Data: \" + response.data);\n      let project = response.data;\n      console.log(parseInt(project));\n\n      Images.append('username', username)\n      Images.append('password', password)\n      Images.append('projid', project)\n      \n      const config = {headers: {'Content-Type': 'multipart/form-data'}}\n      const fetchResponce = await axios.post( '/api/uploadImage', Images, config)\n      console.log(\"Fetch responce: \" + fetchResponce.data)\n      console.log(\"Project Sent\");\n\n      // console.log(\"Fetch Responce\" + response.data)\n      \n      setTimeout(function() {\n        window.location.href = \"/projects\";\n      }, 500);\n      // return response.data;\n    }\n    catch (err){\n      console.log(\"Error submitting project: \" + err);\n    }\n  };\n\n  //error checking function that ensure all required parts of the form is there\n  function checkCompleteness(){\n    console.log(\"submiting form\");\n    console.log(\"title: \", title);\n    console.log(\"projDesc: \", projDesc);\n    console.log(\"numImages: \", numImages);\n    console.log(\"skills: \", skills);\n    console.log(\"typedTag: \", typedTag);\n    console.log(\"supplies: \", items);\n    console.log(\"images: \", projImages);\n    console.log(username, password); \n    console.log(\"done\");\n\n    // Error handling for incomplete form submittions \n    if( title === '' || projDesc === '' || projImages.length === 0 || \n      skills.length === 0 || typedTag.length === 0 || items.length === 0){\n        setPossibleErrors(prevState => ({\n          ...prevState,\n          incompleteForm: true\n        }));\n      return;\n    }\n  };\n\n  //when an error occures, if user is changing the value to resolve issue then error message hides\n  const handleChange = (event) => {\n    event.preventDefault();\n    if(possibleErrors.incompleteForm){\n      setPossibleErrors(prevState => ({\n        ...prevState,\n        incompleteForm: false\n      }));\n      console.log(\"incompleteForm: \", possibleErrors.incompleteForm);\n    }\n  };\n\n  //Function that updates the projects' information in editing mode\n  async function handleUpdate(){\n    console.log(\"updating\");\n    checkCompleteness();\n    try{\n      console.log(\"about to call server\");\n      let response = await axios.post(\"/api/editProject\", {\n        username: username, password: password, projid:Number(id), \n        title:title, description:projDesc, \n        videoURL:projVideo, projImages:projImages,\n        supplies:items, skill:skills, tags:typedTag \n      });\n      console.log(response.data);\n      if(response.data){\n        window.location.href = \"/project\";\n      }else{\n        alert(\"could not edit project\");\n      }\n    }catch (err){\n      console.log(\"Error updating project: \" + err);\n    }\n  }\n\n  //call on page leave or update submission to clean up prefill values \n  function clearValues(){\n    sessionStorage.removeItem('Editing');\n    sessionStorage.removeItem('EditingID');\n    setFormData({\n      projid: '',\n      videourl: '',\n      aslurl: '',\n      title: '',\n      description: '',\n      skills: [],\n      supplies: [],\n      tags: []\n    });\n  }\n\n  return( \n    <>  \n      {/*  error code messaging */}\n      {possibleErrors.incompleteForm ? (\n        <div class=\"incompleteForm\"> \n          <h2> Please make sure you fill out all the fields in the form before \n          uploading your project. Adding a video is optional. </h2>\n        </div>):(\n      <div></div>)}\n      {/* Container for the main grid */}\n      <div class=\"grid-container\">\n        {/* Container for the project title */}\n        <div class=\"grid-project-title-container\">\n          <div class =\"project-title\">\n            <h2>Project Title: </h2>\n            {/* Textarea for the user to enter the project title */}\n            <input id=\"project-title-input\" value={title} onChange={(e) => setTitle(e.target.value)}  />\n          </div>\n        </div>\n\n        {/* Container for the project description - TODO: add to server for storage */}\n        <div class=\"grid-item description-container\">\n          <div class =\"description\">\n            <h2>Description: </h2>\n            <textarea id=\"description\" value={projDesc} onChange={(e) => setProjDesc(e.target.value)} ></textarea>\n          </div>\n        </div>  \n        {/* Container for aligning the image and video upload sections */}\n        <div class=\"alignment\">\n          {/* Container for the image upload */}\n          <div class=\"grid-item image-container\">\n            <div class=\"image-upload\">\n            {/* Heading for uploading image*/}\n              <h2>Upload Image:</h2>\n\n              {/* Input for selecting multiple image files */}\n              <input type=\"file\" id=\"image\" className=\"uploadImage\" accept=\".jpg, .png, .jpeg\" multiple required onChange={handleFileUpload}></input>\n              \n              {/* <h2>Image Description:</h2> */}\n              {/* Display div and input for each image */}\n              {projImages.map((image, index) => (\n                <div key={index}>\n                  {/* Image preview if needed */}\n                  {/* <img style={{width:\"80px\", paddingRight:\"5px\", paddingBottom:\"8px\"}} src={URL.createObjectURL(image.file)} alt={`Image ${index}`} /> */}\n                  {projImages.map((image, index) => (\n                      <img key={index} style={{width:\"80px\", paddingRight:\"5px\", paddingBottom:\"8px\"}} src={image.previewUrl} alt={`Image ${index}`} />\n                  ))}\n\n                  {/* Optional TODO: can implement image describtions to be used for alt text if images dont show.\n                  However, server does not currently have a column to store this so that will need to be changed first.*/}\n                  {/* Input for image description */} \n                  {/* <div className=\"imageTextDiv\">\n                    <textarea\n                      type=\"text\"\n                      value={image.description}\n                      onChange={(e) => {\n                        const updatedImages = [...projImages];\n                        updatedImages[index].description = e.target.value;\n                        setProjImages(updatedImages);\n                      }}\n                      className=\"textarea-design\"\n                      placeholder=\"Enter description\"\n                    >\n                    </textarea>\n                  </div> */}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Container for the video upload section*/}\n          <div class=\"grid-item video-container\">\n            <div class=\"video-upload\"> \n              <h2>Upload Video:</h2>\n              {/* Input for entering video URLs, mainly from YouTube */}\n              <input type=\"url\" id =\"url\" name=\"url\" value={projVideo} onChange={(e) => setProjVideo(e.target.value)}></input>\n              <h2>Video Description:</h2>\n              {/* Textarea for entering video descriptions */}\n              <textarea id=\"video-description\" name=\"video-description\" rows=\"3\" placeholder=\"Enter video description\"></textarea>\n            </div>\n          </div>\n        </div>\n\n        {/* Refers to the above components. */}\n        <SuppliesContent quantity={quantity} setQuantity={setQuantity} \n          itemName={itemName} setItemName={setItemName} items={items}\n          setItems={setItems}\n        />\n        <SkillsContent list={generalList} skills={skills} setSkills={setSkills}/>\n        <RelevantTagsContent list={generalList} typedTag={typedTag} \n          setTypedTag={setTypedTag}\n        /> \n      \n        {/* Submit button.*/}\n        <div class=\"grid-item submit\"> \n          {editMode ? ( \n            <div>\n              <button class=\"submit-button\" onClick={handleUpdate}>Update</button>\n            </div>\n          ):(\n            <div>\n               <button class=\"submit-button\" onClick={handleSubmit}>Submit</button>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}