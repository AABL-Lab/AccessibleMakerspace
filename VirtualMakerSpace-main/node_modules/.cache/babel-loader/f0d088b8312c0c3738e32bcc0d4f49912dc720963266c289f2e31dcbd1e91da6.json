{"ast":null,"code":"var _jsxFileName = \"/Users/katallen/Documents/GitHub/AccessibleMakerspace/VirtualMakerSpace-main/src/Components/commentSectionTwo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from \"axios\";\nimport '../Styling/commentSectionTwo.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CommentSection({\n  projID\n}) {\n  _s();\n  // State for storing comments\n  const [comments, setComments] = useState([]);\n  const commentSectionReference = useRef(null);\n  const [username, setUsername] = useState('');\n  const [idNumber, setidNumber] = useState(0);\n  const [existingComments, setOldComments] = useState([]);\n\n  //once the project ID is recieved when singleProj loads\n  useEffect(() => {\n    if (projID && projID.startsWith(\"id\")) {\n      let id = parseInt(projID.replace(\"id\", \"\"));\n      setidNumber(id);\n      setUsername(sessionStorage.getItem('account'));\n      getProjectComments(id);\n    }\n  }, [projID]);\n\n  //function call to the backend to get the project's comments from the server \n  async function getProjectComments(id) {\n    try {\n      const response = await axios.post('/api/getProjectComments', {\n        projID: id\n      });\n      console.log(response.data);\n      // setComments(response.data); //adding it causes an error stating array  isnt initialized\n      setOldComments(response.data);\n    } catch (error) {\n      console.log(\"Comment Error: \" + error);\n    }\n  }\n\n  // Function to add a new comment\n  const addComment = (message, username) => {\n    const newComment = {\n      id: comments.length + 1,\n      // Unique ID for the comment\n      user: username,\n      message: message,\n      // likes: 0,\n      replies: [],\n      // Array to store replies\n      showReplyBox: false // Initially hide reply box\n    };\n    //add comments in the array\n    setComments([...comments, newComment]);\n    //store the comments in the server\n    pushComments(message);\n    //once the section gets to a certain size, enable scroll feature\n    commentSectionReference.current.style.overflowY = 'scroll';\n  };\n\n  // send new comments to the sever for storage \n  async function pushComments(message) {\n    let key = sessionStorage.getItem('key');\n    try {\n      const response = await axios.post('/api/createComment', {\n        username: username,\n        password: key,\n        projID: Number(idNumber),\n        comment: message\n      });\n    } catch (error) {\n      console.log(\"Comment Error: \" + error);\n    }\n  }\n\n  // Function to handle liking a comment or reply\n  // const likeItem = (itemId, isComment) => {\n  //     const updatedComments = comments.map(comment => {\n  //         if (comment.id === itemId && isComment) {\n  //             return { ...comment, likes: comment.likes + 1 };\n  //         } else if (!isComment) {\n  //             const updatedReplies = comment.replies.map(reply => {\n  //                 if (reply.id === itemId) {\n  //                     return { ...reply, likes: reply.likes + 1 };\n  //                 }\n  //                 return reply;\n  //             });\n  //             return { ...comment, replies: updatedReplies };\n  //         }\n  //         return comment;\n  //     });\n  //     setComments(updatedComments);\n  // };\n\n  // Function to toggle display of reply input field\n  const toggleReplyBox = parentId => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === parentId) {\n        return {\n          ...comment,\n          replies: [...comment.replies, {\n            id: comment.replies.length + 1,\n            message: '',\n            // likes: 0,\n            showReplyBox: true\n          }]\n        };\n      } else {\n        const updatedReplies = comment.replies.map(reply => {\n          if (reply.id === parentId) {\n            return {\n              ...reply,\n              showReplyBox: !reply.showReplyBox\n            };\n          } else {\n            return {\n              ...reply,\n              showReplyBox: false\n            };\n          }\n        });\n        return {\n          ...comment,\n          replies: updatedReplies\n        };\n      }\n    });\n    setComments(updatedComments);\n  };\n\n  // Function to add a reply to a comment or a reply\n  const addReply = (parentId, replyMessage, username) => {\n    const updatedComments = comments.map(comment => {\n      if (comment.id === parentId) {\n        // Add reply to comment\n        return {\n          ...comment,\n          replies: [...(comment.replies || []),\n          // Ensure replies array exists\n          {\n            id: (comment.replies ? comment.replies.length : 0) + 1,\n            username: username,\n            message: replyMessage,\n            // likes: 0,\n            showReplyBox: false // Initially hide reply box\n          }]\n        };\n      } else if (comment.replies && comment.replies.some(reply => reply.id === parentId)) {\n        // Add reply to a reply\n        return {\n          ...comment,\n          replies: comment.replies.map(reply => {\n            if (reply.id === parentId) {\n              return {\n                ...reply,\n                replies: [...(reply.replies || []),\n                // Ensure nested replies array exists\n                {\n                  id: (reply.replies ? reply.replies.length : 0) + 1,\n                  message: replyMessage,\n                  // likes: 0,\n                  showReplyBox: false // Initially hide reply box\n                }]\n              };\n            }\n            return reply;\n          })\n        };\n      }\n      return comment;\n    });\n    setComments(updatedComments);\n  };\n\n  // Recursive component for rendering nested replies\n  const renderReplies = (replies, parentId) => {\n    if (!replies) return null;\n    return replies.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reply\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"reply-username\",\n        children: reply.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"reply-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"like-reply-section\",\n        children: reply.id > comments.length && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reply-button\",\n            onClick: () => toggleReplyBox(reply.id),\n            children: \"Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), reply.showReplyBox && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-section\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Reply...\",\n          onKeyDown: e => {\n            if (e.key === 'Enter' && e.target.value.trim() !== '') {\n              addReply(parentId, e.target.value);\n              e.target.value = '';\n            }\n          },\n          className: \"reply-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this), renderReplies(reply.replies, parentId)]\n    }, reply.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: commentSectionReference,\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write a comment...\",\n        onKeyDown: e => {\n          if (e.key === 'Enter' && e.target.value.trim() !== '') {\n            addComment(e.target.value);\n            e.target.value = '';\n          }\n        },\n        className: \"comment-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: () => {\n          const input = document.querySelector('.comment-input');\n          if (input.value.trim() !== '') {\n            addComment(input.value);\n            input.value = '';\n          }\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), [...comments, ...existingComments].map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"comment-username\",\n        children: comment.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-body\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"comment-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-text\",\n            children: comment.message || comment.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"./images/robot_new.jpg\",\n            alt: \"Profile\",\n            className: \"profile-picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"like-reply-section\",\n        children: !comment.isReply &&\n        /*#__PURE__*/\n        // Only show for initial comments\n        _jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reply-button\",\n            onClick: () => toggleReplyBox(comment.id),\n            children: \"Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 33\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), comment.showReplyBox && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reply-section\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Reply...\",\n          onKeyDown: e => {\n            if (e.key === 'Enter' && e.target.value.trim() !== '') {\n              addReply(comment.id, e.target.value);\n              e.target.value = '';\n            }\n          },\n          className: \"reply-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 25\n      }, this), renderReplies(comment.replies, comment.id)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n}\n_s(CommentSection, \"Y08UsIMiO75ZdM/u2tLzaFngwOU=\");\n_c = CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","CommentSection","projID","_s","comments","setComments","commentSectionReference","username","setUsername","idNumber","setidNumber","existingComments","setOldComments","startsWith","id","parseInt","replace","sessionStorage","getItem","getProjectComments","response","post","console","log","data","error","addComment","message","newComment","length","user","replies","showReplyBox","pushComments","current","style","overflowY","key","password","Number","comment","toggleReplyBox","parentId","updatedComments","map","updatedReplies","reply","addReply","replyMessage","some","renderReplies","className","children","fileName","_jsxFileName","lineNumber","columnNumber","class","onClick","type","placeholder","onKeyDown","e","target","value","trim","ref","input","document","querySelector","content","src","alt","isReply","_c","$RefreshReg$"],"sources":["/Users/katallen/Documents/GitHub/AccessibleMakerspace/VirtualMakerSpace-main/src/Components/commentSectionTwo.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from \"axios\";\nimport '../Styling/commentSectionTwo.css';\n\nexport default function CommentSection({projID}) {\n    // State for storing comments\n    const [comments, setComments] = useState([]);\n    const commentSectionReference = useRef(null);\n    const [username, setUsername] = useState('');\n    const [idNumber, setidNumber] = useState(0);\n    const [existingComments, setOldComments] = useState([]);\n\n    //once the project ID is recieved when singleProj loads\n    useEffect(() => { \n        if (projID && projID.startsWith(\"id\")) {\n            let id = parseInt(projID.replace(\"id\", \"\"))\n            setidNumber(id);\n            setUsername(sessionStorage.getItem('account'))\n            getProjectComments(id);\n        }\n    },[projID]);\n\n    //function call to the backend to get the project's comments from the server \n    async function getProjectComments(id){\n        try{\n            const response = await axios.post('/api/getProjectComments', {projID: id});\n            console.log(response.data);\n            // setComments(response.data); //adding it causes an error stating array  isnt initialized\n            setOldComments(response.data);\n        }catch(error){\n            console.log(\"Comment Error: \" + error)\n        }\n    }\n\n    // Function to add a new comment\n    const addComment = (message, username) => {\n        const newComment = {\n            id: comments.length + 1, // Unique ID for the comment\n            user: username, \n            message: message,\n            // likes: 0,\n            replies: [], // Array to store replies\n            showReplyBox: false // Initially hide reply box\n        };\n        //add comments in the array\n        setComments([...comments, newComment]);\n        //store the comments in the server\n        pushComments(message);\n        //once the section gets to a certain size, enable scroll feature\n        commentSectionReference.current.style.overflowY = 'scroll';\n    };\n\n    // send new comments to the sever for storage \n    async function pushComments(message){\n        let key = sessionStorage.getItem('key');\n        try{\n           const response = await axios.post('/api/createComment', {username: username, password: key, projID: Number(idNumber), comment: message});\n        }catch(error){\n            console.log(\"Comment Error: \" + error)\n        }\n    }\n\n    // Function to handle liking a comment or reply\n    // const likeItem = (itemId, isComment) => {\n    //     const updatedComments = comments.map(comment => {\n    //         if (comment.id === itemId && isComment) {\n    //             return { ...comment, likes: comment.likes + 1 };\n    //         } else if (!isComment) {\n    //             const updatedReplies = comment.replies.map(reply => {\n    //                 if (reply.id === itemId) {\n    //                     return { ...reply, likes: reply.likes + 1 };\n    //                 }\n    //                 return reply;\n    //             });\n    //             return { ...comment, replies: updatedReplies };\n    //         }\n    //         return comment;\n    //     });\n    //     setComments(updatedComments);\n    // };\n\n    // Function to toggle display of reply input field\n    const toggleReplyBox = (parentId) => {\n        const updatedComments = comments.map(comment => {\n            if (comment.id === parentId) {\n                return {\n                    ...comment,\n                    replies: [\n                        ...comment.replies,\n                        {\n                            id: comment.replies.length + 1,\n                            message: '',\n                            // likes: 0,\n                            showReplyBox: true\n                        }\n                    ]\n                };\n            } else {\n                const updatedReplies = comment.replies.map(reply => {\n                    if (reply.id === parentId) {\n                        return { ...reply, showReplyBox: !reply.showReplyBox };\n                    } else {\n                        return { ...reply, showReplyBox: false };\n                    }\n                });\n                return { ...comment, replies: updatedReplies };\n            }\n        });\n        setComments(updatedComments);\n    };\n\n\n    // Function to add a reply to a comment or a reply\n    const addReply = (parentId, replyMessage, username) => {\n        const updatedComments = comments.map(comment => {\n            if (comment.id === parentId) {\n                // Add reply to comment\n                return {\n                    ...comment,\n                    replies: [\n                        ...(comment.replies || []), // Ensure replies array exists\n                        {\n                            id: (comment.replies ? comment.replies.length : 0) + 1,\n                            username: username, \n                            message: replyMessage,\n                            // likes: 0,\n                            showReplyBox: false // Initially hide reply box\n                        }\n                    ]\n                };\n            } else if (comment.replies && comment.replies.some(reply => reply.id === parentId)) {\n                // Add reply to a reply\n                return {\n                    ...comment,\n                    replies: comment.replies.map(reply => {\n                        if (reply.id === parentId) {\n                            return {\n                                ...reply,\n                                replies: [\n                                    ...(reply.replies || []), // Ensure nested replies array exists\n                                    {\n                                        id: (reply.replies ? reply.replies.length : 0) + 1,\n                                        message: replyMessage,\n                                        // likes: 0,\n                                        showReplyBox: false // Initially hide reply box\n                                    }\n                                ]\n                            };\n                        }\n                        return reply;\n                    })\n                };\n            }\n            return comment;\n        });\n        setComments(updatedComments);\n    };\n\n    // Recursive component for rendering nested replies\n    const renderReplies = (replies, parentId) => {\n        if (!replies) return null;\n\n        return replies.map(reply => (\n            <div key={reply.id} className=\"reply\">\n                    {/* todo: Add space for username */}\n                    <p className=\"reply-username\">{reply.username}</p>\n                <div class=\"reply-message\"><p>{reply.message}</p></div>\n                {/* <p>{reply.message}</p> */}\n                <div className=\"like-reply-section\">\n                    {/* Render like and reply buttons for existing replies */}\n                    {reply.id > comments.length && (\n                        <>\n                            {/* <button className=\"like-button\" onClick={() => likeItem(reply.id, false)}>Like ({reply.likes})</button> */}\n                            <button className=\"reply-button\" onClick={() => toggleReplyBox(reply.id)}>Reply</button>\n                        </>\n                    )}\n                </div>\n                {/* Reply input field for newly added replies */}\n                {reply.showReplyBox && (\n                    <div className=\"reply-section\">\n                        <input \n                            type=\"text\" \n                            placeholder=\"Reply...\" \n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter' && e.target.value.trim() !== '') {\n                                    addReply(parentId, e.target.value);\n                                    e.target.value = '';\n                                }\n                            }}\n                            className=\"reply-input\"\n                            \n                        />\n                    </div>\n                )}\n                {/* Recursive call for nested replies */}\n                {renderReplies(reply.replies, parentId)}\n            </div>\n        ));\n    };\n\n\n    return (\n        <div ref={commentSectionReference} className=\"comment-section\">\n            <h2>Comments</h2>\n\n            {/* Input field for adding comments */}\n            <div className=\"comment-input-container\">\n                <input \n                    type=\"text\" \n                    placeholder=\"Write a comment...\" \n                    onKeyDown={(e) => {\n                        if (e.key === 'Enter' && e.target.value.trim() !== '') {\n                            addComment(e.target.value);\n                            e.target.value = '';\n                        } \n                    }}\n                    className=\"comment-input\"\n                />\n                <button \n                    className=\"send-button\"\n                    onClick={() => {\n                        const input = document.querySelector('.comment-input');\n                        if (input.value.trim() !== '') {\n                            addComment(input.value);\n                            input.value = '';\n                        }\n                    }}\n                >\n                    Send\n                </button>\n\n            </div>\n\n            {/* Display comments */}\n            {/* {comments.map(comment => ( */}\n            {[...comments, ...existingComments].map(comment => (\n                <div key={comment.id} className=\"comment\">\n                    {/* Add space for username */}\n                        <p className=\"comment-username\">{comment.user}</p>\n                    <div className=\"comment-body\">\n                        <p className=\"comment-message\">\n                            <p className=\"message-text\">{comment.message || comment.content}</p>\n                            {/* <span className=\"message-text\">{comment.message}</span> */}\n                            <img src={\"./images/robot_new.jpg\"} alt=\"Profile\" className=\"profile-picture\" />\n                        </p>\n                    </div>\n                    {/* Like and reply buttons */}\n                    <div className=\"like-reply-section\">\n                        {!comment.isReply && ( // Only show for initial comments\n                            <>\n                                {/* <button className=\"like-button\" onClick={() => likeItem(comment.id, true)}>Like ({comment.likes})</button> */}\n                                <button className=\"reply-button\" onClick={() => toggleReplyBox(comment.id)}>Reply</button>\n                            </>\n                        )}\n                    </div>\n                    {/* Reply section */}\n                    {comment.showReplyBox && (\n                        <div className=\"reply-section\">\n                            {/* Reply form for comment */}\n                            <input \n                                type=\"text\" \n                                placeholder=\"Reply...\" \n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' && e.target.value.trim() !== '') {\n                                        addReply(comment.id, e.target.value);\n                                        e.target.value = '';\n                                    }\n                                }}\n                                className=\"reply-input\" \n                            />\n                        </div>\n                    )}\n                    {/* Display replies */}\n                    {renderReplies(comment.replies, comment.id)}\n                </div>\n            ))}\n        </div>\n    );\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}